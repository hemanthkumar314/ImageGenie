/* eslint-disable no-unused-vars */
import React, { useState, useEffect } from 'react';
import { Card, FormField, Loader } from '../components';

const RenderCards = ({ data, title , userName , deleteimage }) => {
  if (data?.length > 0) {
    return data.map((post) => <Card key={post._id} userName={userName} deleteimage={deleteimage} {...post} />);
  }
  return (
    <h2 className='mt-5 font-bold text-[#6449ff] text-xl uppercase'>{title}</h2>
  );
};

const Home = ({userName}) => {
  const [loading, setLoading] = useState(false);
  const [allPosts, setAllPosts] = useState([]);
  const [searchText, setSearchText] = useState('');
  const [SearchedResults,setSearchedResults] = useState(null);
  const [SearchTimeout, setSearchTimeout] = useState(null);

  
  useEffect(() => {
    const fetchPosts = async () => {
      setLoading(true);
      try {
        const response = await fetch('http://localhost:8080/api/v1/post/all', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({ userName })
        });
  
        if (response.ok) {
          const result = await response.json();
          console.log('Received data:', result);
          setAllPosts(result.data.reverse());
        } else {
          console.error('Response not OK:', response.status, response.statusText);
        }
      } catch (error) {
        console.error('Fetch error:', error);
        alert(error.message);
      } finally {
        setLoading(false);
      }
    };
    fetchPosts();
  }, [userName]);

  const deleteimage = async (_id) => {
    try {
      const response = await fetch('http://localhost:8080/api/v1/post/deleteimg', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ id: _id })
      });
      
      if (response.ok) {
        console.log('deleted');
        setAllPosts(prevPosts => prevPosts.filter(post => post._id !== _id));
      } else {
        console.error('Error deleting image');
      }
    } catch (error) {
      alert(error);
    }
  };

  const handleSearchChange = (e) => {
    clearTimeout(SearchTimeout);
    setSearchText(e.target.value);

    setSearchTimeout(
      setTimeout(() => {
        const searchResult = allPosts.filter((item) => item.name.toLowerCase().includes(searchText.toLowerCase()) || item.prompt.toLowerCase().includes(searchText.toLowerCase()));
        setSearchedResults(searchResult);
      }, 500),
    );
  };

  return (
    <section className='max-w-7xl mx-auto ml-14 items-center my-4'>
      <div>
        <h1 className='font-extrabold text-[#222328] text-[32px]'>The Open Gallery</h1>
        <p className='mt-2 text-[#666e75] text-[16px] max-w-[800px]'>Explore a collection of imaginative and visually stunning images generated by Stability AI</p>
      </div>

      <div className='mt-10'>
        <FormField 
          labelName='Search Posts'
          type='text'
          name='text'
          placeholder='Search posts'
          value={searchText}
          handleChange={handleSearchChange}
        />
      </div>

      <div className='mt-8'>
        {loading ? (
          <div className='flex justify-center items-center'>
            <Loader />
          </div>
        ) : (
          <>
            {searchText && (
              <h2 className='font-medium text-[#666e75] text-xl mb-3'>
                Showing results for <span className='text-[#222328]'>{searchText}</span>
              </h2>
            )}
            <div className='grid lg:grid-cols-4 sm:grid-cols-3 xs:grid-cols-2 grid-cols-1 gap-3'>
              {searchText ? (
                <RenderCards data={SearchedResults} title="No search results found" userName={userName} deleteimage={deleteimage}/>
              ) : (
                <RenderCards data={allPosts} title="No posts found" userName={userName} deleteimage={deleteimage}/>
              )}
            </div>
          </>
        )}
      </div>
    </section>
  );
};

export default Home;